Singleton Desgin Pattern
========================
What is the Singleton Pattern?
-> The Singleton Design Pattern ensures that only one instance of a class is created and that the same instance is used everywhere in the application.
-> It also provides a global point of access to that instance.

-> Singleton object are the object which are instantiated only once for project. If we try to get the object then we get same object again and again.
Example: Lazy Loading
  package SingletonDesignPattern;
//Lazy Loading Singleton Design Pattern Example
class PrimeMinister{
    private static PrimeMinister pm;
    private PrimeMinister(){

    }
    public static PrimeMinister getObject(){
        if(pm==null){
            pm=new PrimeMinister();
        }
        return pm;
    }
}

public class Main {
    public static void main(String[] args) {
        PrimeMinister pm1=PrimeMinister.getObject();
        System.out.println(pm1.hashCode());
        PrimeMinister pm2 =PrimeMinister.getObject();
        System.out.println(pm2.hashCode());       
        PrimeMinister pm3 =PrimeMinister.getObject();
        System.out.println(pm3.hashCode());
    }   
}

  Example: Eager Loading
  package SingletonDesignPattern;
  //Eager Loading Singleton Design Pattern Example
  public class PrimeMinister1 {
      private static PrimeMinister1 pm=new PrimeMinister1();
      public static PrimeMinister1 getObject() throws NullPointerException{
          return pm;
      }   
  }
  package SingletonDesignPattern;  
  public class Main1 {
      public static void main(String[] args) {          
          PrimeMinister1 pm1=PrimeMinister1.getObject();
          System.out.println(pm1.hashCode());  
          PrimeMinister1 pm2=PrimeMinister1.getObject();
          System.out.println(pm2.hashCode());
     }    
  }

    Example:Synchronizarion
   package SingletonDesignPattern; 
   public class PrimeMinister2 { 
       private static PrimeMinister2 pm;   
       private PrimeMinister2(){
   
       }
      //Here we done Method Synchronized
       // public static synchronized PrimeMinister2 getObject(){
       //     if(pm==null){
       //         pm=new PrimeMinister2();
       //     }
       //     return pm;
       // }  
       //Here we done Syncronization Block 
       public static PrimeMinister2 getObject(){
           if(pm==null){
               synchronized(PrimeMinister2.class){
                   if(pm==null){
                       pm=new PrimeMinister2();
                   }              
               }           
           }
           return pm;
       }     
   }
    package SingletonDesignPattern; 
    public class Main2 {    
        public static void main(String[] args) {          
            PrimeMinister2 pm1=PrimeMinister2.getObject();
            System.out.println(pm1.hashCode());
            PrimeMinister2 pm2=PrimeMinister2.getObject();
            System.out.println(pm2.hashCode());
        }        
    }
Breaking Singleton Design Pattern
---------------------------------
There are three ways to break singleton design pattern
 1. Using Reflection API
 -> With the help of relfection api we can call private constructor as well and create multiple object by calling private constructor.
     Example: 
    package SingletonDesignPattern;
     public class PrimeMinister3 { 
         //Breaking Single ton Design Pattern using Reflection Api
         private static PrimeMinister3 pm; 
         private PrimeMinister3(){
     
         }
         public static PrimeMinister3 getObject(){
             if(pm==null){
                 synchronized(PrimeMinister3.class){
                     if(pm==null){
                         pm=new PrimeMinister3();
                     }
                 }
             }
             return pm;
         } 
     }
     package SingletonDesignPattern;
     import java.lang.reflect.Constructor; 
     public class Main3 {
         public static void main(String[] args) throws Exception{       
             Constructor<PrimeMinister3> con= PrimeMinister3.class.getDeclaredConstructor();
             con.setAccessible(true);
             PrimeMinister3 pm1=con.newInstance();
             System.out.println(pm1.hashCode());
             PrimeMinister3 pm2=PrimeMinister3.getObject();
             System.out.println(pm2.hashCode());
         }    
     }
     ---------------------------------------------------------------------------------------------------------------------------------
      solution
       we can do the soultion in two ways.
       a. using ENUM
           Example: 
           package SingletonDesignPattern;
           public enum PrimeMinister4 {
           INSTANCE
           }
          package SingletonDesignPattern;   
          public class Main4 {
              public static void main(String[] args) {                
                  PrimeMinister4 pm1=PrimeMinister4.INSTANCE;
                  System.out.println(pm1.hashCode());      
                  PrimeMinister4 pm2=PrimeMinister4.INSTANCE;
                  System.out.println(pm2.hashCode());
              }    
          }
       b. check the object in private constructor if the object exists then throw exception to terminate the execution.
          Example:
          package SingletonDesignPattern;
          public class PrimeMinister5 {
              private static PrimeMinister5 pm;
              private PrimeMinister5(){   
                  if(pm!=null){
                      throw new RuntimeException("You are trying to break singlton desgign pattern");
                  }
              }
              public static PrimeMinister5 getObject(){
                  if(pm==null){
                      synchronized(PrimeMinister5.class){
                          if(pm==null){
                              pm=new PrimeMinister5();
                          }
                      }
                  }
                  return pm;    
              }  
          }
          package SingletonDesignPattern;
          import java.lang.reflect.Constructor;
          public class Main5 {
           public static void main(String[] args) throws Exception{     
              PrimeMinister5 pm1=PrimeMinister5.getObject();
              System.out.println(pm1.hashCode());     
              Constructor<PrimeMinister5> con = PrimeMinister5.class.getDeclaredConstructor();
              con.setAccessible(true);
              PrimeMinister5 pm2=con.newInstance();
              System.out.println(pm2.hashCode());    
           }        
          }
  2. Using Deserialization
  -> when weserialze and deserialze the singleton object then singleton automatically got destroyed and provide us different object.
   solution:
   just implement readResolve() method
   public Object readResolve() {
   return ob;
   }
      Example:
      package SingletonDesignPattern;
      import java.io.Serializable; 
      public class PrimeMinister6 implements Serializable{    
          private  static PrimeMinister6 pm;    
          private PrimeMinister6(){
             
          } 
          public static PrimeMinister6 getObject(){
              if(pm==null){
                  synchronized(PrimeMinister6.class){
                      if(pm==null){
                          pm=new PrimeMinister6();
                      }
                  }
              }
              return pm;
          }
        public Object readResolve(){
          return pm;
        }
      }

      package SingletonDesignPattern;
     import java.io.FileInputStream;
     import java.io.FileOutputStream;
     import java.io.ObjectInputStream;
     import java.io.ObjectOutputStream;
     public class Main6 {
         public static void main(String[] args) throws Exception {
             PrimeMinister6 pm1=PrimeMinister6.getObject();
             ObjectOutputStream oos=new ObjectOutputStream(new FileOutputStream("abc.ob"));
             oos.writeObject(pm1);
             oos.close();
             System.out.println(pm1.hashCode());
             ObjectInputStream ois=new ObjectInputStream(new FileInputStream("abc.ob"));
             PrimeMinister6 pm2=(PrimeMinister6)ois.readObject();
             ois.close();
             System.out.println(pm2.hashCode());
         } 
     }

 3. Using cloning
 ->  when we clone then also we get different object.
      solution
       just override clone method and return the same instance.
       @Override
       public Object clone() throws CloneNotSupportedException {
       return samosa;
       }

      Example:
      package SingletonDesignPattern;
      public class PrimeMinister7  implements Cloneable{    
          private static PrimeMinister7 pm;   
          private PrimeMinister7(){
           
          }
          public static PrimeMinister7 getObject(){
              if(pm==null){
                  synchronized(PrimeMinister7.class){
                      if(pm==null){
                          pm=new PrimeMinister7();
                      }
                  }
              }
              return pm;   
          }
          // @Override
          // public Object clone() throws CloneNotSupportedException{
          //     return super.clone();
      
          // }
          @Override
          public Object clone(){
              return pm;
          }     
      }

      package SingletonDesignPattern;    
      public class Main7 {
      public static void main(String[] args) throws CloneNotSupportedException{       
          PrimeMinister7 pm1=PrimeMinister7.getObject();
         System.out.println(pm1.hashCode());          
         PrimeMinister7 pm2=(PrimeMinister7)pm1.clone();
         System.out.println(pm2.hashCode());
          }         
      }


| Use Case                     | Why Singleton?                                                       | Example                                          |
| ---------------------------- | -------------------------------------------------------------------- | ------------------------------------------------ |
| **Logger**                   | Only one logging instance should exist to write to a single log file | `Logger.getInstance().log("Some log")`           |
| **Database Connection Pool** | Avoid creating multiple heavy DB connections                         | `DBConnectionPool.getInstance().getConnection()` |
| **Configuration Settings**   | Load once and reuse throughout the app                               | `Config.getInstance().get("db.url")`             |
| **Cache**                    | Centralized in-memory data store                                     | `CacheManager.getInstance().put("key", "value")` |
| **Thread Pool Manager**      | Only one thread pool managing background tasks                       | `ThreadPool.getInstance().submit(task)`          |

Best Practices:
-> Use Enum Singleton (recommended in Java) to avoid reflection and serialization issues.
-> Avoid using Singleton just for convenience. Use it only when single instance is logically required.

Factory Desgin Pattern
======================
-> When there is superclass and multiple subclasses and we want to get object of subclasses based on input and requirement. 
   Then we create factory class which takes the responsibility of creating object of class based on input.
Example: 
   package FactoryDesignPattern;  
   public interface Pizza {
      void prepare(); 
      void bake(); 
      void cut(); 
      void box();
  }
  package FactoryDesignPattern;
  public class BabyCornPizza implements Pizza {
      @Override
      public void prepare() {
         System.out.println("BabyCornPizza Pizza Preparing");
      }
      @Override
      public void bake() {
         System.out.println("BabyCornPizza Pizza baking");
      }  
      @Override
      public void cut() {
          System.out.println("BabyCornPizza Pizza Cutting");
      }
      @Override
      public void box() {
          System.out.println("BabyCornPizza Pizza boxing");
      }      
  }
 package FactoryDesignPattern;
 public class MargeritaPizza implements Pizza{
     @Override
     public void prepare() {
        System.out.println("MargeritaPizza Pizza Preparing");
     }
     @Override
     public void bake() {
        System.out.println("MargeritaPizza Pizza baking");
     } 
     @Override
     public void cut() {
         System.out.println("MargeritaPizza Pizza Cutting");
     }
     @Override
     public void box() {
         System.out.println("MargeritaPizza Pizza boxing");
     }     
 }
 package FactoryDesignPattern;
 public class PizzaFactory {
     public static Object createPizza(String type){
         if(type.trim().equalsIgnoreCase("MargeritaPizza")){
             return new MargeritaPizza();
         }
         else if(type.trim().equalsIgnoreCase("BabyCornPizza")){
             return new BabyCornPizza();
         }
         else{
         return null;
         }
     }
 }
  package FactoryDesignPattern; 
  public class Main {
      public static void main(String[] args) {       
        Pizza p1=(Pizza)PizzaFactory.createPizza("MargeritaPizza");
        p1.prepare();
        p1.bake();
        p1.cut();
        p1.box(); 
        Pizza p2=(Pizza)PizzaFactory.createPizza("BabyCornPizza");
        p2.prepare();
        p2.bake();
        p2.cut();
        p2.box();
      }      
  }

Advantages
 1. Focus on creating object for Interface rather than implementation.
 2. Loose coupling, more robust code
 3. Supports polymorphism
 4. Code reuse 

| Use Case                | Description                                                                           |
| ----------------------- | ------------------------------------------------------------------------------------- |
| **Shape Drawing App**   | User selects shape: circle, square, triangle — factory returns the appropriate object |
| **Document Readers**    | Open file with `.doc`, `.pdf`, `.txt` — factory returns appropriate reader class      |
| **Notification System** | Send SMS, Email, or Push notification — factory decides which notifier class to use   |
| **Database Connector**  | Based on configuration: MySQL, PostgreSQL, MongoDB — factory gives correct connector  |


Abstract Factory Design Pattern
===============================
-> the Abstract Factory Design Pattern is indeed similar to the Factory Pattern but goes one level higher by providing a factory of factories.
-> The Abstract Factory Pattern provides an interface for creating families of related or dependent objects without specifying their concrete classes.
-> “Factory of Factories” — because it creates a group of factories.

Example:
 package AbstractFactoryDesignPattern;
  public interface Employee {
      String designation();
      int salary();     
  }
  package AbstractFactoryDesignPattern; 
  public class AndroidDeveloper implements Employee{ 
      @Override
      public String designation() {
        System.out.println("Android Developer");
        return "ANDROID DEVELOPER";
      }
      @Override
      public int salary() {
          return 80000;
      }  
  }
    package AbstractFactoryDesignPattern;
    public class JavaDeveloper implements Employee{    
        @Override
        public String designation() {
          System.out.println("Java Developer");
          return "JAVADEVELOPER";
        }   
        @Override
        public int salary() {
           return 60000;
        }        
    }
  package AbstractFactoryDesignPattern;
  public class WebDeveloper implements Employee{ 
      @Override
      public String designation() {
          System.out.println("Web Developer");
          return "WEB DEVELOPER";
      }  
      @Override
      public int salary() {
          return 50000;
      }      
  }
  package AbstractFactoryDesignPattern;
  public class AndroidFactory extends EmployeeAbstractFactory { 
      @Override
      public Employee createEmployee() {
        return new AndroidDeveloper();
      }     
  }
  package AbstractFactoryDesignPattern;
  public class WebDevFactory  extends EmployeeAbstractFactory{  
      @Override
      public Employee createEmployee() {
        return new WebDeveloper();
      }    
  }
  package AbstractFactoryDesignPattern;
  public class JavaDevFactory  extends EmployeeAbstractFactory{
      @Override
      public AbstractFactoryDesignPattern.Employee createEmployee() {
          return new JavaDeveloper();
      }    
  }
  package AbstractFactoryDesignPattern;
  public class EmployeeFactory {
      //getEmployee
      public static Employee getEmployee(EmployeeAbstractFactory factory){
          return factory.createEmployee();
      }     
  }
  package AbstractFactoryDesignPattern;
  abstract class EmployeeAbstractFactory {
    public abstract Employee createEmployee();   
  }
  package AbstractFactoryDesignPattern;
  public class Main {
      public static void main(String[] args) {    
          Employee emp1=EmployeeFactory.getEmployee(new JavaDevFactory());
          System.out.println(emp1.designation());
          System.out.println(emp1.salary()); 
          Employee emp2=EmployeeFactory.getEmployee(new WebDevFactory());
          System.out.println(emp2.designation());
          System.out.println(emp2.salary());
      }      
  }

| Scenario         | Explanation                                                                                                  |
| ---------------- | ------------------------------------------------------------------------------------------------------------ |
| GUI Toolkit      | You have multiple themes (Windows, Mac, Linux). Each theme needs to create **Buttons**, **Checkboxes**, etc. |
| Abstract Factory | Create a `GUIFactory` that returns the correct Button and Checkbox factory depending on the OS.              |


 Builder Design Pattern
=======================
-> while creating object when object contain may attributes there are many problem exists :
 1. we have to pass many arguments to create object.
 2. some parameters might be optional
 3. factory class takes all responsibility for creating object . if the object is heavy then all complexity is the part of factory class. So in   builder pattern be create object step by step and finally return final object with desired values of attributes
 Example:
 package BuilderDesignPattern;
    public class Car {   
        private String carName;
        private String engine;
        private int wheels;
        private boolean airBags; 
        // Constructor using CarBuilder
        public Car(CarBuilder builder) {
            this.carName = builder.carName;
            this.engine = builder.engine;
            this.wheels = builder.wheels;
            this.airBags = builder.airBags;
        }
        // Getters
        public String getCarName() {
            return carName;
        }    
        public String getEngine() {
            return engine;
        }    
        public int getWheels() {
            return wheels;
        }   
        public boolean isAirBags() {
            return airBags;
        }
        @Override
        public String toString() {
            return "Car [carName=" + carName + ", engine=" + engine + ", wheels=" + wheels + ", airBags=" + airBags + "]";
        }
    }
   package BuilderDesignPattern;
    public class CarBuilder {   
        // Car properties to be set by builder
        String carName;
        String engine;
        int wheels;
        boolean airBags;  
        // Setters that return CarBuilder object to allow method chaining
        public CarBuilder setCarName(String carName) {
            this.carName = carName;
            return this;
        }    
        public CarBuilder setEngine(String engine) {
            this.engine = engine;
            return this;
        }    
        public CarBuilder setWheels(int wheels) {
            this.wheels = wheels;
            return this;
        }    
        public CarBuilder setAirBags(boolean airBags) {
            this.airBags = airBags;
            return this;
        }    
        // Build method to create Car object
        public Car build() {
            return new Car(this);
        }
    }
  package BuilderDesignPattern;
  public class Main {  
      public static void main(String[] args) {          
        Car car1=new CarBuilder().setCarName("Swift").setEngine("Desiel").setWheels(5).setAirBags(true).build();  
        System.out.println(car1);
        Car car2=new CarBuilder().setCarName("XUV 500").setAirBags(true).setEngine("petrol").setWheels(4).build();
        System.out.println(car2);
      }      
  }

| Use Case                               | Why Builder?                                  |
| -------------------------------------- | --------------------------------------------- |
| **Creating complex JavaBeans or DTOs** | Many optional fields, constructors get ugly   |
| **Creating an HTTP Request**           | Need to add headers, body, auth, query params |
| **Building SQL queries**               | Add select, where, group by, having, etc.     |
| **UI construction**                    | Build screens with optional components        |
| **Test Data Builders**                 | Build dummy/mock objects with flexible values |

Prototype Design Pattern
========================
 -> The concept is to copy an existing object rather than creating a new instance from scratch. because creating new object may be costly. This approach saves costly resources and time, especially when object creation is a heavy process.

| Use Case                 | Why Prototype?                                               |
| ------------------------ | ------------------------------------------------------------ |
| **Document Templates**   | Create new documents from a pre-defined structure            |
| **Game Development**     | Clone similar enemies/characters efficiently                 |
| **Graphic Editors**      | Clone shapes with properties like size, color                |
| **Data Caching**         | Clone objects from a cached prototype instead of re-fetching |
| **UI Prototyping Tools** | Duplicate UI components for reuse                            |

